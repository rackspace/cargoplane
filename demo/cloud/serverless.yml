# serverless.yml
service: mycargoplaneapp

plugins:
  - serverless-plugin-typescript

custom:
  pubSubRoleName: ${sls:stage}-mycargoplaneapp-role

provider:
  name: aws
  runtime: nodejs22.x
  region: ${env:AWS_REGION, "us-west-2"}

  environment:
    PUB_SUB_ROLE_NAME: ${self:custom.pubSubRoleName}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - iot:DescribeEndpoint
            - iot:Connect
            - iot:Publish
          Resource: "*"
        - Effect: "Allow"
          Action:
            - 'sts:AssumeRole'
          Resource:
            Fn::GetAtt:
              - IoTRole
              - Arn

  httpApi:
    cors: true

functions:
  getCargoplaneCredentials:
    handler: src/handlers.getCredentials
    events:
      - httpApi:
          method: GET
          path: /credentials
  publishCargoplane:
    handler: src/handlers.publish
    events:
      - httpApi:
          method: POST
          path: /publish

resources:
  Resources:
    IoTRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.pubSubRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: {'Fn::Join': [':', ["arn:aws:iam", "", {Ref: "AWS::AccountId"}, "root"]]}
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.pubSubRoleName}-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                Effect: Allow
                Action:
                  - iot:Connect
                  - iot:Subscribe
                  - iot:Publish
                  - iot:Receive
                Resource: "arn:aws:iot:${aws:region}:*:*"
